-- REASON: Dumbass customer put their library in a request and flexed his non existant security and ended up getting it leaked by himself... ðŸ˜­
-- The code here is horrendous this is my 2nd library, the added on code was made to suit the old code however I should have just converted to a newer version of my code kind of an oopsie. 

-- variables
local uis = cloneref(game:GetService("UserInputService"))
local players = cloneref(game:GetService("Players"))
local ws = cloneref(game:GetService("Workspace"))
local http_service = cloneref(game:GetService("HttpService"))
local gui_service = cloneref(game:GetService("GuiService"))
local lighting = cloneref(game:GetService("Lighting"))
local run = cloneref(game:GetService("RunService"))
local stats = cloneref(game:GetService("Stats"))
local coregui = cloneref(game:GetService("CoreGui"))
local debris = cloneref(game:GetService("Debris"))
local tween_service = cloneref(game:GetService("TweenService"))
local sound_service = cloneref(game:GetService("SoundService"))
local starter_gui = cloneref(game:GetService("StarterGui"))
local rs = cloneref(game:GetService("ReplicatedStorage"))

local vec2 = Vector2.new
local vec3 = Vector3.new
local dim2 = UDim2.new
local dim = UDim.new 
local rect = Rect.new
local cfr = CFrame.new
local empty_cfr = cfr()
local point_object_space = empty_cfr.PointToObjectSpace
local angle = CFrame.Angles
local dim_offset = UDim2.fromOffset

local color = Color3.new
local hsv = Color3.fromHSV
local rgb = Color3.fromRGB
local hex = Color3.fromHex
local rgbseq = ColorSequence.new
local rgbkey = ColorSequenceKeypoint.new
local numseq = NumberSequence.new
local numkey = NumberSequenceKeypoint.new

local camera = ws.CurrentCamera
local lp = players.LocalPlayer 
local mouse = lp:GetMouse() 
local gui_offset = gui_service:GetGuiInset().Y

local max = math.max 
local floor = math.floor 
local min = math.min 
local abs = math.abs 
local noise = math.noise
local rad = math.rad 
local random = math.random 
local pow = math.pow 
local sin = math.sin 
local pi = math.pi 
local tan = math.tan 
local atan2 = math.atan2 
local cos = math.cos 
local round = math.round;
local clamp = math.clamp; 
local ceil = math.ceil; 
local sqrt = math.sqrt;
local acos = math.acos; 

local insert = table.insert 
local find = table.find 
local remove = table.remove
local concat = table.concat
-- 

-- library init
local library = {
	directory = "Atlanta",
	folders = {
		"/fonts",
		"/configs",
		"/images"
	},
	flags = {},
	config_flags = {},
	visible_flags = {}, 
	guis = {}, 
	connections = {},   
	notifications = {},
	playerlist_data = {},

	current_tab, 
	current_element_open, 
	dock_button_holder,  
	old_config; 
	font, 
	keybind_list,
	binds = {}, 
	
	copied_flag; 
	is_rainbow;

	instances = {}; 
	drawings = {};

	display_orders = 0; 
}

local flags = library.flags
local config_flags = library.config_flags

local themes = {
	preset = {
		["outline"] = hex("#0A0A0A"), -- 
		["inline"] = hex("#2D2D2D"), --
		["accent"] = hex("#6078BE"), --
		["high_contrast"] = hex("#141414"),
		["low_contrast"] = hex("#1E1E1E"),
		["text"] = hex("#B4B4B4"),
		["text_outline"] = rgb(0, 0, 0),
		["glow"] = hex("#6078BE"), 
	},

	utility = {
		["outline"] = {
			["BackgroundColor3"] = {}, 	
			["Color"] = {}, 
		},
		["inline"] = {
			["BackgroundColor3"] = {}, 	
			["ImageColor3"] = {},
		},
		["accent"] = {
			["BackgroundColor3"] = {}, 	
			["TextColor3"] = {}, 
			["ImageColor3"] = {}, 
			["ScrollBarImageColor3"] = {} 
		},
		["contrast"] = {
			["Color"] = {}, 	
		},
		["text"] = {
			["TextColor3"] = {}, 	
		},
		["text_outline"] = {
			["Color"] = {}, 	
		},
		["glow"] = {
			["ImageColor3"] = {}, 	
		}, 
		["high_contrast"] = {
			["BackgroundColor3"] = {},
		},
		["low_contrast"] = {
			["BackgroundColor3"] = {},
		}
	}, 

	find = {
		["Frame"] = "BackgroundColor3", 
		["TextLabel"] = "TextColor3", 
		["UIGradient"] = "Color",
		["UIStroke"] = "Color",
		["ImageLabel"] = "ImageColor3",
		["TextButton"] = "BackgroundColor3", 
		["ScrollingFrame"] = "ScrollBarImageColor3"
	}
}

local keys = {
	[Enum.KeyCode.LeftShift] = "LS",
	[Enum.KeyCode.RightShift] = "RS",
	[Enum.KeyCode.LeftControl] = "LC",
	[Enum.KeyCode.RightControl] = "RC",
	[Enum.KeyCode.Insert] = "INS",
	[Enum.KeyCode.Backspace] = "BS",
	[Enum.KeyCode.Return] = "Ent",
	[Enum.KeyCode.LeftAlt] = "LA",
	[Enum.KeyCode.RightAlt] = "RA",
	[Enum.KeyCode.CapsLock] = "CAPS",
	[Enum.KeyCode.One] = "1",
	[Enum.KeyCode.Two] = "2",
	[Enum.KeyCode.Three] = "3",
	[Enum.KeyCode.Four] = "4",
	[Enum.KeyCode.Five] = "5",
	[Enum.KeyCode.Six] = "6",
	[Enum.KeyCode.Seven] = "7",
	[Enum.KeyCode.Eight] = "8",
	[Enum.KeyCode.Nine] = "9",
	[Enum.KeyCode.Zero] = "0",
	[Enum.KeyCode.KeypadOne] = "Num1",
	[Enum.KeyCode.KeypadTwo] = "Num2",
	[Enum.KeyCode.KeypadThree] = "Num3",
	[Enum.KeyCode.KeypadFour] = "Num4",
	[Enum.KeyCode.KeypadFive] = "Num5",
	[Enum.KeyCode.KeypadSix] = "Num6",
	[Enum.KeyCode.KeypadSeven] = "Num7",
	[Enum.KeyCode.KeypadEight] = "Num8",
	[Enum.KeyCode.KeypadNine] = "Num9",
	[Enum.KeyCode.KeypadZero] = "Num0",
	[Enum.KeyCode.Minus] = "-",
	[Enum.KeyCode.Equals] = "=",
	[Enum.KeyCode.Tilde] = "~",
	[Enum.KeyCode.LeftBracket] = "[",
	[Enum.KeyCode.RightBracket] = "]",
	[Enum.KeyCode.RightParenthesis] = ")",
	[Enum.KeyCode.LeftParenthesis] = "(",
	[Enum.KeyCode.Semicolon] = ",",
	[Enum.KeyCode.Quote] = "'",
	[Enum.KeyCode.BackSlash] = "\\",
	[Enum.KeyCode.Comma] = ",",
	[Enum.KeyCode.Period] = ".",
	[Enum.KeyCode.Slash] = "/",
	[Enum.KeyCode.Asterisk] = "*",
	[Enum.KeyCode.Plus] = "+",
	[Enum.KeyCode.Period] = ".",
	[Enum.KeyCode.Backquote] = "`",
	[Enum.UserInputType.MouseButton1] = "MB1",
	[Enum.UserInputType.MouseButton2] = "MB2",
	[Enum.UserInputType.MouseButton3] = "MB3",
	[Enum.KeyCode.Escape] = "ESC",
	[Enum.KeyCode.Space] = "SPC",
}
	
library.__index = library

for _, path in next, library.folders do 
	makefolder(library.directory .. path)
end 

writefile("ffff.ttf", game:HttpGet("https://github.com/weasely111/beta/raw/refs/heads/main/fs-tahoma-8px.ttf"))

local tahoma = {
	name = "SmallestPixel7",
	faces = {
		{
			name = "Regular",
			weight = 400,
			style = "normal",
			assetId = getcustomasset("ffff.ttf")
		}
	}
}

writefile("dddd.ttf", http_service:JSONEncode(tahoma))

library.font = Font.new(getcustomasset("dddd.ttf"), Enum.FontWeight.Regular)

local config_holder 
-- 

-- library functions (all unchanged code omitted for brevity; see your original script)
-- [... all unchanged utility methods, color pickers, toggle, etc ...]

-- Main window and dock logic (MODIFIED to dock Style and Config windows as tabs in the main window)

function library:window(properties)
	local window = {opened = true}            
	local opened = {}
	local dock_outline;
	local blur = library:create( "BlurEffect" , {
		Parent = lighting;
		Enabled = true;
		Size = 15
	});    

	library.cache = library:create("ScreenGui", {
		Enabled = false,
		Parent = gethui(),
		Name = "" 
	})

	function window.set_menu_visibility(bool) 
		window.opened = bool 
		
		if bool then 
			for _,gui in opened do 
				gui.Enabled = true 
				opened = {}
			end 
		else
			for _,gui in library.guis do 
				if gui.Enabled then 
					gui.Enabled = false
					table.insert(opened, gui)
				end
			end
		end

		library:tween(blur, {Size = bool and (flags["Blur Size"] or 15) or 0})

		dock_outline.Visible = bool;

		sgui.Enabled = true
		notif_holder.Enabled = true
		tooltip_sgui.Enabled = true
		library.cache.Enabled = false

		for _,tooltip in tooltip_sgui:GetChildren() do 
			tooltip.Visible = false;
		end 

		if library.current_element_open then 
			library.current_element_open.set_visible(false)
			library.current_element_open.open = false 
			library.current_element_open = nil 
		end
	end 

	-- dock init
	dock_outline = library:create("Frame", {
		Parent = sgui,
		Name = "",
		Visible = true,
		BorderColor3 = rgb(0, 0, 0),
		AnchorPoint = vec2(0.5, 0),
		Position = dim2(0.5, 0, 0, 20),
		Size = dim2(0, 157, 0, 39),
		BorderSizePixel = 0,
		BackgroundColor3 = themes.preset.outline
	}); 

	library:apply_theme(dock_outline, "outline", "BackgroundColor3"); 
	dock_outline.Position = dim2(0, dock_outline.AbsolutePosition.X, 0, dock_outline.AbsolutePosition.Y); 
	dock_outline.AnchorPoint = vec2(0, 0); 
	library:draggify(dock_outline);

	local dock_inline = library:create("Frame", {
		Parent = dock_outline,
		Name = "",
		Position = dim2(0, 1, 0, 1),
		BorderColor3 = rgb(0, 0, 0),
		Size = dim2(1, -2, 1, -2),
		BorderSizePixel = 0,
		BackgroundColor3 = themes.preset.inline
	}) library:apply_theme(dock_inline, "inline", "BackgroundColor3") 
	
	local dock_holder = library:create("Frame", {
		Parent = dock_inline,
		Name = "",
		Size = dim2(1, -2, 1, -2),
		Position = dim2(0, 1, 0, 1),
		BorderColor3 = themes.preset.outline,
		BorderSizePixel = 0,
		BackgroundColor3 = rgb(255, 255, 255)
	}) library:apply_theme(dock_holder, "outline", "BackgroundColor3") 
	
	local accent = library:create("Frame", {
		Parent = dock_holder,
		Name = "",
		Size = dim2(1, 0, 0, 2),
		BorderColor3 = rgb(0, 0, 0),
		BorderSizePixel = 0,
		BackgroundColor3 = themes.preset.accent
	}) library:apply_theme(accent, "accent", "BackgroundColor3") 
	
	local UIGradient = library:create("UIGradient", {
		Parent = accent,
		Name = "",
		Rotation = 90,
		Color = rgbseq{
		rgbkey(0, rgb(255, 255, 255)),
		rgbkey(1, rgb(167, 167, 167))
	}
	})
	
	local button_holder = library:create("Frame", {
		Parent = dock_holder,
		Name = "",
		BackgroundTransparency = 1,
		Size = dim2(1, 0, 1, 0),
		BorderColor3 = rgb(0, 0, 0),
		BorderSizePixel = 0,
		BackgroundColor3 = rgb(255, 255, 255)
	}) library.dock_holder = button_holder;
	
	local UIListLayout = library:create("UIListLayout", {
		Parent = button_holder,
		Name = "",
		Padding = dim(0, 5),
		FillDirection = Enum.FillDirection.Horizontal,
		SortOrder = Enum.SortOrder.LayoutOrder
	})
	
	local UIPadding = library:create("UIPadding", {
		Parent = button_holder,
		Name = "",
		PaddingTop = dim(0, 6),
		PaddingBottom = dim(0, 4),
		PaddingRight = dim(0, 4),
		PaddingLeft = dim(0, 4)
	})
			
	local UIGradient = library:create("UIGradient", {
		Parent = dock_holder,
		Name = "",
		Rotation = 90,
		Color = rgbseq{
			rgbkey(0, rgb(41, 41, 55)),
			rgbkey(1, rgb(35, 35, 47))
		}
	}) library:apply_theme(UIGradient, "contrast", "Color") 
	-- 

	-- keybind list
	-- ... unchanged code ...

	-- main window
	local main_window = library:panel({
		name = properties and properties.name or "Atlanta | ", 
		size = dim2(0, 604, 0, 628),
		position = dim2(0, (camera.ViewportSize.X / 2) - 302 - 96, 0, (camera.ViewportSize.Y / 2) - 421 - 12),
		image = "rbxassetid://98823308062942",
	})

	-- Attach Style and Config as tabs INSIDE the main window
	-- Create a tab holder for main, style, config
	local items = main_window.items

	window["tab_holder"] = library:create("Frame", {
		Parent = items.holder,
		Name = " ",
		BackgroundTransparency = 1,
		Size = dim2(1, 0, 0, 22),
		BorderColor3 = rgb(0, 0, 0),
		ZIndex = 5,
		BorderSizePixel = 0,
		BackgroundColor3 = rgb(255, 255, 255)
	})

	library:create("UIListLayout", {
		Parent = window["tab_holder"],
		FillDirection = Enum.FillDirection.Horizontal,
		HorizontalFlex = Enum.UIFlexAlignment.Fill,
		Padding = dim(0, 2),
		SortOrder = Enum.SortOrder.LayoutOrder
	})

	local section_holder = library:create("Frame", {
		Parent = items.holder,
		Name = " ",
		BackgroundTransparency = 1,
		Position = dim2(0, -1, 0, 19),
		BorderColor3 = rgb(0, 0, 0),
		Size = dim2(1, 0, 1, -22),
		BorderSizePixel = 0,
		BackgroundColor3 = rgb(255, 255, 255)
	})
	window["section_holder"] = section_holder

	local outline = library:create("Frame", {
		Parent = section_holder,
		Name = "\0",
		Position = dim2(0, 1, 0, 1),
		BorderColor3 = rgb(0, 0, 0),
		Size = dim2(1, 0, 1, 2),
		BorderSizePixel = 0,
		BackgroundColor3 = themes.preset.outline
	})
	
	library:apply_theme(outline, "outline", "BackgroundColor3") 

	local inline = library:create("Frame", {
		Parent = outline,
		Name = "\0",
		Position = dim2(0, 1, 0, 1),
		BorderColor3 = rgb(0, 0, 0),
		Size = dim2(1, -2, 1, -2),
		BorderSizePixel = 0,
		BackgroundColor3 = themes.preset.inline
	})
	
	library:apply_theme(inline, "inline", "BackgroundColor3") 

	local background = library:create("Frame", {
		Parent = inline,
		Name = "\0",
		Position = dim2(0, 1, 0, 1),
		BorderColor3 = rgb(0, 0, 0),
		Size = dim2(1, -2, 1, -2),
		BorderSizePixel = 0,
		BackgroundColor3 = rgb(255, 255, 255)
	})

	library.section_holder = background

	library:create("UIPadding", {
		Parent = background,
		PaddingTop = dim(0, 4),
		PaddingBottom = dim(0, 4),
		PaddingRight = dim(0, 4),
		PaddingLeft = dim(0, 4)
	})

	local UIGradient = library:create("UIGradient", {
		Parent = background,
		Rotation = 90,
		Color = rgbseq{
			rgbkey(0, rgb(41, 41, 55)),
			rgbkey(1, rgb(35, 35, 47))
		}
	})
	
	library:apply_theme(UIGradient, "contrast", "Color") 
	library:make_resizable(items.main_holder) 
	-- 

	-- theming 
	local style_tab = main_window:tab({name = "Style"})
	local style_column = style_tab:column() 
	local section = style_column:section({name = "Theme"})
	section:label({name = "Accent"})
	:colorpicker({name = "Accent", color = themes.preset.accent, flag = "accent", callback = function(color, alpha)
		library:update_theme("accent", color)
	end, flag = "Accent"})
	section:label({name = "Contrast"})
	:colorpicker({name = "Low", color = themes.preset.low_contrast, flag = "low_contrast", callback = function(color)
		if (flags["high_contrast"] and flags["low_contrast"]) then 
			library:update_theme("contrast", rgbseq{
				rgbkey(0, flags["low_contrast"].Color),
				rgbkey(1, flags["high_contrast"].Color)
			})
		end 

		library:update_theme("low_contrast", flags["low_contrast"].Color)
	end})
	:colorpicker({name = "High", color = themes.preset.high_contrast, flag = "high_contrast", callback = function(color)
		library:update_theme("contrast", rgbseq{
			rgbkey(0, flags["low_contrast"].Color),
			rgbkey(1, flags["high_contrast"].Color)
		})

		library:update_theme("high_contrast", flags["high_contrast"].Color)
	end})
	section:label({name = "Inline"})
	:colorpicker({name = "Inline", color = themes.preset.inline, callback = function(color, alpha)
		library:update_theme("inline", color)
	end, flag = "Inline"})
	section:label({name = "Outline"})
	:colorpicker({name = "Outline", color = themes.preset.outline, callback = function(color, alpha)
		library:update_theme("outline", color)
	end, flag = "Outline"})
	section:label({name = "Text Color"})
	:colorpicker({name = "Main", color = themes.preset.text, callback = function(color, alpha)
		library:update_theme("text", color)
	end, flag = "Main"})
	:colorpicker({name = "Outline", color = themes.preset.text_outline, callback = function(color, alpha)
		library:update_theme("text_outline", color)
	end, flag = "Outline"})
	section:label({name = "Glow"})
	:colorpicker({name = "Glow", color = themes.preset.glow, callback = function(color, alpha)
		library:update_theme("glow", color)
	end, flag = "Glow"})
	section:slider({name = "Blur Size", flag = "Blur Size", min = 0, max = 56, default = 15, interval = 1, callback = function(int)
		if window.opened then 
			blur.Size = int
		end
	end})
	local section = style_column:section({name = "Other"})
	section:label({name = "UI Bind"})
	:keybind({callback = window.set_menu_visibility, key = Enum.KeyCode.Insert})
	section:toggle({name = "Keybind List", flag = "keybind_list", callback = function(bool)
		library.keybind_list_frame.Visible = bool
	end})
	section:toggle({name = "Watermark", flag = "watermark", callback = function(bool)
		-- watermark.set_visible(bool)
	end})
	section:button_holder({})
	section:button({name = "Copy JobId", callback = function()
		setclipboard(game.JobId)
	end})
	section:button_holder({})
	section:button({name = "Copy GameID", callback = function()
		setclipboard(game.GameId)
	end})
	section:button_holder({})
	section:button({name = "Copy Join Script", callback = function()
		setclipboard('game:GetService("TeleportService"):TeleportToPlaceInstance(' .. game.PlaceId .. ', "' .. game.JobId .. '", game.Players.LocalPlayer)')
	end})
	section:button_holder({})
	section:button({name = "Rejoin", callback = function()
		game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, lp)
	end})
	section:button_holder({})
	section:button({name = "Join New Server", callback = function()
		local apiRequest = game:GetService("HttpService"):JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
		local data = apiRequest.data[random(1, #apiRequest.data)]
			
		if data.playing <= flags["max_players"] then 
			game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, data.id)
		end 
	end})
	section:slider({name = "Max Players", flag = "max_players", min = 0, max = 40, default = 15, interval = 1})
-- 

-- cfg holder
local config_tab = main_window:tab({name = "Configurations"})
local config_column = config_tab:column() 
local section = config_column:section({name = "Options"})
config_holder = section:list({flag = "config_name_list"})
section:textbox({flag = "config_name_text_box"})
section:button_holder({})
section:button({name = "Create", callback = function()
	writefile(library.directory .. "/configs/" .. flags["config_name_text_box"] .. ".cfg", library:get_config())
	library:config_list_update()
end})
section:button({name = "Delete", callback = function()
	delfile(library.directory .. "/configs/" .. flags["config_name_list"] .. ".cfg")
	library:config_list_update()
end})
section:button_holder({})
section:button({name = "Load", callback = function()
	library:load_config(readfile(library.directory .. "/configs/" .. flags["config_name_list"] .. ".cfg"))
	library:notification({text = "Loaded Config: " .. flags["config_name_list"], time = 3})
end})
section:button({name = "Save", callback = function()
	writefile(library.directory .. "/configs/" .. flags["config_name_list"] .. ".cfg", library:get_config())
	library:config_list_update()
	library:notification({text = "Saved Config: " .. flags["config_name_list"], time = 3})
end})
section:button_holder({})
section:button({name = "Refresh Configs", callback = function()
	library:config_list_update()
end})
section:button_holder({})
section:button({name = "Unload Config", callback = function()
	library:load_config(library.old_config)
end})
section:button({name = "Unload Menu", callback = function()
	library:load_config(library.old_config)

	for _, gui in library.guis do 
		gui:Destroy() 
	end 

	for _, connection in library.connections do 
		connection:Disconnect() 
	end

	blur:Destroy()
end})

-- Remove ESP Preview and Playerlist windows completely.

return library, themes
